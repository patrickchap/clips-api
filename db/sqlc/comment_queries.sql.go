// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: comment_queries.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  content,
  video_id,
  user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, content, video_id, user_id, created_at
`

type CreateCommentParams struct {
	Content string `json:"content"`
	VideoID int64  `json:"video_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.Content, arg.VideoID, arg.UserID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.VideoID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCommentsByVideo = `-- name: DeleteCommentsByVideo :exec
Delete
FROM 
  comments 
WHERE
  video_id = $1
`

func (q *Queries) DeleteCommentsByVideo(ctx context.Context, videoID int64) error {
	_, err := q.db.Exec(ctx, deleteCommentsByVideo, videoID)
	return err
}

const getCommentsByVideo = `-- name: GetCommentsByVideo :many
SELECT id, content, video_id, user_id, created_at 
FROM 
  comments 
WHERE
  video_id = $3
ORDER BY id 
LIMIT $1
OFFSET $2
`

type GetCommentsByVideoParams struct {
	Limit   int64 `json:"limit"`
	Offset  int64 `json:"offset"`
	VideoID int64 `json:"video_id"`
}

func (q *Queries) GetCommentsByVideo(ctx context.Context, arg GetCommentsByVideoParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByVideo, arg.Limit, arg.Offset, arg.VideoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.VideoID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
