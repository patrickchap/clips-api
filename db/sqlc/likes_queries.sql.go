// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: likes_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes (
  video_id,
  user_id
) VALUES (
  $1, $2
)
RETURNING id, video_id, user_id, created_at
`

type CreateLikeParams struct {
	VideoID pgtype.Int8 `json:"video_id"`
	UserID  string      `json:"user_id"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRow(ctx, createLike, arg.VideoID, arg.UserID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.VideoID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLikesByVideoAndUser = `-- name: DeleteLikesByVideoAndUser :exec
Delete
FROM 
  likes 
WHERE
  video_id = $1
AND
  user_id = $2
`

type DeleteLikesByVideoAndUserParams struct {
	VideoID pgtype.Int8 `json:"video_id"`
	UserID  string      `json:"user_id"`
}

func (q *Queries) DeleteLikesByVideoAndUser(ctx context.Context, arg DeleteLikesByVideoAndUserParams) error {
	_, err := q.db.Exec(ctx, deleteLikesByVideoAndUser, arg.VideoID, arg.UserID)
	return err
}

const getLikesByVideo = `-- name: GetLikesByVideo :many
SELECT id, video_id, user_id, created_at 
FROM 
  likes 
WHERE
  video_id = $3
ORDER BY id 
LIMIT $1
OFFSET $2
`

type GetLikesByVideoParams struct {
	Limit   int64       `json:"limit"`
	Offset  int64       `json:"offset"`
	VideoID pgtype.Int8 `json:"video_id"`
}

func (q *Queries) GetLikesByVideo(ctx context.Context, arg GetLikesByVideoParams) ([]Like, error) {
	rows, err := q.db.Query(ctx, getLikesByVideo, arg.Limit, arg.Offset, arg.VideoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.VideoID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
